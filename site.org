#
# The gh-pages site at 'https://j-keck.github.io/reno
# are generated from this file

#
#+title: reno - reading notes extractor
#+hugo_base_dir: ./doc/site
#+options: creator:t author:nil

* Index
:PROPERTIES:
:export_title: reno
:export_file_name: _index
:export_hugo_section: /
:export_hugo_weight: 10
:export_hugo_type: docs
:END:

~reno~ extracts highlighted text from your pdf in an org-file.

The highlighted text will be placed in a ~#+BEGIN_QUOTE~ / ~#+END_QUOTE~ block
with a drawer with the id's from extracted text.

To update your notes and include new highlighted text, use the ~update~ subcommand.
This will insert new highlighted text in right position.

You can merge blocks or change the exported block to headings, source blocks, plain text or latex fragments.
When you keep the drawer with the id's, ~reno~ will recognize this blocks and keep it intact when you update your notes.

{{< hint warning >}}
**This project is in a early state!**
{{< /hint >}}


* Installation
  :PROPERTIES:
  :export_file_name: install
  :export_hugo_weight: 20
  :export_hugo_section: docs
  :END:

** Binary packages

You can download the latest binary package from **here** or from the [[https://github.com/j-keck/reno/releases][GitHub release page]].

 #+BEGIN_SRC elisp :results output raw :exports results
   (defun version-string ()
       "Lookup the latest `reno' version."
       (s-trim-right (shell-command-to-string "git describe --always --abbrev=0 --match 'v[0-9].[0-9].[0-9]'")))

     (defun section-for (title version artifact exec)
       (format (concat "{{< tab \"%s\" >}}\n"
                       "  1.) **Download** the latest version: "
                       "[[https://github.com/j-keck/reno/releases/download/%s/%s][%s]]\n\n"
                       "  2.) Run it:  ~%s~\n"
                       "{{< /tab >}}\n\n"
               ) title version artifact artifact exec))

     (letrec ((v  (version-string))
              (nv (string-trim v "v")))
       (princ "\n\n{{<tabs \"install\">}}\n")
       (princ (section-for "Linux (x64)" v "reno-linux-x64.zip" "./reno"))
       (princ (section-for "Generic (Java)" v (format "reno-%s.jar" nv) (format "java -jar reno-%s.jar" nv)))
       (princ "{{< /tabs >}}\n\n"))
 #+END_SRC


{{< hint warning >}}
The ~--pdf-backend pdfbox~ flag gives better results, but doesn't work with ~native-image~ ([[https://issues.apache.org/jira/browse/PDFBOX-4548][see PDFBOX-4548]]).

So if you would use the [[https://pdfbox.apache.org/][PDFBox]] backend, use the "Generic (Java)" version.
{{< /hint >}}


* Usage
  :PROPERTIES:
  :export_file_name: usage
  :export_hugo_weight: 30
  :export_hugo_section: docs
  :END:

** Usage

 #+BEGIN_EXAMPLE
main⟩ reno --help
Usage:
    reno export
    reno update
    reno dump

reading notes extractor

Options and flags:
    --help
        Display this help text.
    --version, -v
        Print the version number and exit.

Subcommands:
    export
        Export the annotations from the given Pdf
    update
        update the notes in the Org-file with new annotations from the Pdf
    dump
        for debugging / inspection (run without arguments for the usage)
 #+END_EXAMPLE

** Export annotations to an org-file

Use the ~export~ subcommand to export your annotations.

#+BEGIN_EXAMPLE
main⟩ reno export
Usage: reno export [--overwrite] [--pdf-engine <value>] [--mark-from <value>] <pdf> [<org>]

Export the annotations from the given Pdf

Options and flags:
    --help
        Display this help text.
    --overwrite, -f
        Overwrite existing file
    --pdf-engine <value>
        Used pdf engine (itext / pdfbox)
    --mark-from <value>
        Extract mark from (boundingrect / quads)

#+END_EXAMPLE


** Update new annotations

To update your org-file and include new annotations from your pdf, use the ~update~ subcommand.

#+BEGIN_EXAMPLE
main⟩ reno update
Usage: reno update [--pdf-engine <value>] [--mark-from <value>] <pdf> [<src-org>] [<dst-org>]

update the notes in the Org-file with new annotations from the Pdf

Options and flags:
    --help
        Display this help text.
    --pdf-engine <value>
        Used pdf engine (itext / pdfbox)
    --mark-from <value>
        Extract mark from (boundingrect / quads)
#+END_EXAMPLE

* Example
  :PROPERTIES:
  :export_file_name: example
  :export_hugo_weight: 40
  :export_hugo_section: docs
  :END:

** Reading notes
I use ~reno~ to create reading notes.

From this marked PDF Document:

 [[/market-text-example.png]]

i get (after some edits) this org-mode snippet:

 [[/market-text-example-notes-org.png]]

where i can

 - change some quotes to headers
 - edit exported text
 - add some notes for me


** Play with source code

I can mark some challenges:

[[/market-challenges.png]]


and pack the source code in ~#+begin_src~ and ~#+end_src~ blocks to evaluate it with org-babel.

[[/market-challenges-notes-org.png]]



Later i can export the notes from Emacs to a Pdf file to read it later again:

[[/market-challenges-notes-pdf.png]]



* Contact / Support
  :PROPERTIES:
  :export_file_name: contact-support
  :export_hugo_weight: 60
  :export_hugo_section: docs
  :END:

** Contact

{{< columns >}}
[[https://github.com/j-keck][{{< fas envelope lg >}} Check my GitHub Profile for my mail address.]]
<--->
[[https://twitter.com/jhyphenkeck][{{< fab twitter lg >}} Send me an direct message on twitter.]]
<--->
[[https://keybase.io/jkeck][{{< fab keybase lg >}} Use keybase to contact me.]]
{{< /columns >}}


** Support

If you have any questions, trouble or other input, feel free to contact
me directly (see [[/docs/contact-support#contact][Contact]]) or open a [[https://github.com/j-keck/reno/issues/new][issue@github]].
